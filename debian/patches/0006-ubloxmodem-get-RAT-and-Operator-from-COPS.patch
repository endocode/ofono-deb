From 8b441a59b6a6ea378c969260bcdedeb8e63803c0 Mon Sep 17 00:00:00 2001
From: Djalal Harouni <djalal@endocode.com>
Date: Thu, 20 Oct 2016 15:26:58 +0200
Subject: [PATCH 06/58] ubloxmodem: get RAT and Operator from COPS

Although these are being read by the network-registration driver,
we'd have to do a lot of API changes and expose a lot of info to
netmon to be able to read those values directly. So we issue the
AT command directly.

Change-Id: I8ec5b1c73022fe2845edd1addeab00a08af5dd0a
---
 drivers/ubloxmodem/netmon.c | 91 ++++++++++++++++++++++++++++++++++++++++++++-
 test/get-serving-cell-info  |  0
 2 files changed, 89 insertions(+), 2 deletions(-)
 mode change 100644 => 100755 test/get-serving-cell-info

diff --git a/drivers/ubloxmodem/netmon.c b/drivers/ubloxmodem/netmon.c
index 7a10c05..bb70cf0 100644
--- a/drivers/ubloxmodem/netmon.c
+++ b/drivers/ubloxmodem/netmon.c
@@ -36,9 +36,13 @@
 #include <ofono/modem.h>
 #include <ofono/netmon.h>
 
+#include "common.h"
+#include "netreg.h"
 #include "ubloxmodem.h"
 #include "drivers/atmodem/vendor.h"
 
+static const char *cops_prefix[] = { "+COPS:", NULL };
+
 struct netmon_driver_data {
 	GAtChat *modem;
 	GAtChat *aux;
@@ -49,8 +53,29 @@ struct req_cb_data {
 
 	ofono_netmon_cb_t cb;
 	void *data;
+
+	struct ofono_network_operator op;
+	int rssi;
 };
 
+static int ublox_map_radio_access_technology(int tech)
+{
+	/* TODO: complete me */
+	switch (tech) {
+	case ACCESS_TECHNOLOGY_GSM:
+	case ACCESS_TECHNOLOGY_GSM_COMPACT:
+		return OFONO_NETMON_CELL_TYPE_GSM;
+	case ACCESS_TECHNOLOGY_UTRAN:
+		return OFONO_NETMON_CELL_TYPE_UMTS;
+	case ACCESS_TECHNOLOGY_EUTRAN:
+		return OFONO_NETMON_CELL_TYPE_LTE;
+	default:
+		break;
+	}
+
+	return 0;
+}
+
 static inline struct req_cb_data *req_cb_data_new0(void *cb, void *data, void *user)
 {
 	struct req_cb_data *ret = g_new0(struct req_cb_data, 1);
@@ -72,9 +97,68 @@ static gboolean ublox_delayed_register(gpointer user_data)
 	return FALSE;
 }
 
+static void cops_cb(gboolean ok, GAtResult *result, gpointer user_data)
+{
+	struct req_cb_data *cbd = user_data;
+	ofono_netmon_cb_t cb = cbd->cb;
+	struct ofono_netmon *nm = cbd->netmon;
+	struct ofono_error error;
+	GAtResultIter iter;
+	int tech;
+	const char *name;
+
+	DBG("ok %d", ok);
+
+	decode_at_error(&error, g_at_result_final_response(result));
+
+	if (!ok) {
+		goto error;
+	}
+
+	g_at_result_iter_init(&iter, result);
+
+	if (!g_at_result_iter_next(&iter, "+COPS:"))
+		return;
+
+	g_at_result_iter_skip_next(&iter);
+	g_at_result_iter_skip_next(&iter);
+
+	if (g_at_result_iter_next_string(&iter, &name) == FALSE)
+		goto error;
+
+	strncpy(cbd->op.name, name, OFONO_MAX_OPERATOR_NAME_LENGTH);
+	cbd->op.name[OFONO_MAX_OPERATOR_NAME_LENGTH] = '\0';
+
+	/* Ignored for now. TODO: maybe read format but value
+	 * wouldn't be forwarder anywhere
+	 */
+	cbd->op.mcc[0] = '\0';
+	cbd->op.mnc[0] = '\0';
+
+	/* Default to GSM */
+	if (g_at_result_iter_next_number(&iter, &tech) == FALSE)
+		cbd->op.tech = ublox_map_radio_access_technology(ACCESS_TECHNOLOGY_GSM);
+	else
+		cbd->op.tech = ublox_map_radio_access_technology(tech);
+
+
+	ofono_netmon_serving_cell_notify(nm,
+					 cbd->op.tech,
+					 OFONO_NETMON_INFO_INVALID);
+
+	CALLBACK_WITH_SUCCESS(cb, cbd->data);
+	g_free(cbd);
+	return;
+
+error:
+	CALLBACK_WITH_FAILURE(cb, cbd->data);
+	g_free(cbd);
+}
+
 static void ublox_netmon_request_update(struct ofono_netmon *netmon,
 					ofono_netmon_cb_t cb, void *data)
 {
+	struct netmon_driver_data *nmd = ofono_netmon_get_data(netmon);
 	struct req_cb_data *cbd;
 
 	DBG("ublox netmon request update");
@@ -85,8 +169,11 @@ static void ublox_netmon_request_update(struct ofono_netmon *netmon,
 		return;
 	}
 
-	CALLBACK_WITH_SUCCESS(cb, data);
-	g_free(cbd);
+	if (g_at_chat_send(nmd->aux, "AT+COPS?", cops_prefix,
+			   cops_cb, cbd, NULL) == 0) {
+		CALLBACK_WITH_FAILURE(cb, data);
+		g_free(cbd);
+	}
 }
 
 static int ublox_netmon_probe(struct ofono_netmon *netmon,
diff --git a/test/get-serving-cell-info b/test/get-serving-cell-info
old mode 100644
new mode 100755
-- 
2.7.4

